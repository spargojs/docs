declare module 'spargo/cdn' {
  export {};
  //# sourceMappingURL=cdn.d.ts.map
}
declare module 'spargo/cdn.d.ts' {
  {"version":3,"file":"cdn.d.ts","sourceRoot":"","sources":["../../../home/justin/Projects/spargo/src/cdn.ts"],"names":[],"mappings":""}
}
declare module 'spargo/index' {
  import { Spargo } from 'spargo/spargo';
  export default Spargo;
  //# sourceMappingURL=index.d.ts.map
}
declare module 'spargo/index.d.ts' {
  {"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../home/justin/Projects/spargo/src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,UAAU,CAAC;AAEhC,eAAe,MAAM,CAAC"}
}
declare module 'spargo/masks' {
  const masks: {
      phone: (value: string) => string;
      currency: (value: string, args?: string) => string;
      date: (value: string) => string;
  };
  export default masks;
  //# sourceMappingURL=masks.d.ts.map
}
declare module 'spargo/masks.d.ts' {
  {"version":3,"file":"masks.d.ts","sourceRoot":"","sources":["../../../home/justin/Projects/spargo/src/masks.ts"],"names":[],"mappings":"AA+CA,QAAA,MAAM,KAAK;mBA/CW,MAAM,KAAG,MAAM;sBAiBZ,MAAM,SAAS,MAAM,KAAG,MAAM;kBAoBlC,MAAM,KAAG,MAAM;CAcnC,CAAA;AAED,eAAe,KAAK,CAAA"}
}
declare module 'spargo/spargo' {
  import { spargoElement } from "spargo/types";
  import { Vdom } from "spargo/vdom";
  export class Spargo {
      elements: spargoElement[];
      vdom: Vdom;
      constructor();
      /**
       * @returns void
       */
      initialize(): void;
      /**
       * @description Create a new element
       * @param element
       * @returns void
       * @throws Error if the provided element does not have an associated method
       */
      createElement(element: Element): void;
  }
  //# sourceMappingURL=spargo.d.ts.map
}
declare module 'spargo/spargo.d.ts' {
  {"version":3,"file":"spargo.d.ts","sourceRoot":"","sources":["../../../home/justin/Projects/spargo/src/spargo.ts"],"names":[],"mappings":"AAUA,OAAO,EAAC,aAAa,EAAsB,MAAM,SAAS,CAAC;AAE3D,OAAO,EAAC,IAAI,EAAC,MAAM,QAAQ,CAAC;AAU5B,qBAAa,MAAM;IACf,QAAQ,EAAE,aAAa,EAAE,CAAM;IAC/B,IAAI,EAAE,IAAI,CAAuB;;IAUjC;;OAEG;IACH,UAAU,IAAI,IAAI;IAWlB;;;;;OAKG;IACH,aAAa,CAAC,OAAO,EAAE,OAAO,GAAG,IAAI;CAwDxC"}
}
declare module 'spargo/types' {
  import { VNode } from "snabbdom";
  type ignited = () => void;
  type spargoElementObject = {
      [key: string]: any;
      ignited?: ignited;
  };
  type spargoElement = {
      id: string;
      element: Element;
      vNode: VNode;
      object: spargoElementObject;
  };
  export { ignited, spargoElementObject, spargoElement };
  //# sourceMappingURL=types.d.ts.map
}
declare module 'spargo/types.d.ts' {
  {"version":3,"file":"types.d.ts","sourceRoot":"","sources":["../../../home/justin/Projects/spargo/src/types.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,KAAK,EAAC,MAAM,UAAU,CAAC;AAE/B,KAAK,OAAO,GAAG,MAAM,IAAI,CAAC;AAG1B,KAAK,mBAAmB,GAAG;IAAE,CAAC,GAAG,EAAE,MAAM,GAAG,GAAG,CAAC;IAAC,OAAO,CAAC,EAAE,OAAO,CAAA;CAAE,CAAC;AAErE,KAAK,aAAa,GAAG;IACjB,EAAE,EAAE,MAAM,CAAC;IACX,OAAO,EAAE,OAAO,CAAC;IACjB,KAAK,EAAE,KAAK,CAAC;IACb,MAAM,EAAE,mBAAmB,CAAA;CAC9B,CAAA;AAED,OAAO,EAAC,OAAO,EAAE,mBAAmB,EAAE,aAAa,EAAC,CAAC"}
}
declare module 'spargo/utils' {
  import { Attrs, Classes, Props } from "snabbdom";
  import { spargoElementObject } from "spargo/types";
  /**
   * @description Check for the truthiness of the provided value within the object.
   * @param value
   * @param object
   * @returns  boolean
   * @throws If the provided value is not found within the object
   */
  function valueTruthyInObject(value: string, object: spargoElementObject): boolean;
  /**
   * @description Retrieves the props of the element in the format that snabbdom expects
   * @param object
   * @param element
   * @returns object
   */
  function generateProps(object: object, element: Element): Props;
  /**
   * @description Retrieves the attrs of the element in the format that snabbdom expects
   * @param object
   * @param element
   * @returns object
   */
  function generateAttrs(object: object, element: Element): Attrs;
  /**
   * @description Retrieves the classes of the element in the format that snabbdom expects
   * @param element
   * @param object
   * @returns Classes
   */
  function retrieveClasses(element: Element, object: spargoElementObject): Classes;
  export { valueTruthyInObject, generateProps, generateAttrs, retrieveClasses };
  //# sourceMappingURL=utils.d.ts.map
}
declare module 'spargo/utils.d.ts' {
  {"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../../../home/justin/Projects/spargo/src/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAC,MAAM,UAAU,CAAC;AAC/C,OAAO,EAAC,mBAAmB,EAAC,MAAM,SAAS,CAAC;AAE5C;;;;;;GAMG;AACH,iBAAS,mBAAmB,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,mBAAmB,GAAG,OAAO,CAmBhF;AAED;;;;;GAKG;AACH,iBAAS,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,GAAG,KAAK,CA0D9D;AAED;;;;;GAKG;AACH,iBAAS,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,GAAG,KAAK,CAiC9D;AAED;;;;;GAKG;AACH,iBAAS,eAAe,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,mBAAmB,GAAG,OAAO,CAoC/E;AAED,OAAO,EAAC,mBAAmB,EAAE,aAAa,EAAE,aAAa,EAAE,eAAe,EAAC,CAAC"}
}
declare module 'spargo/vdom' {
  import { VNode } from "snabbdom";
  import { spargoElement, spargoElementObject } from "spargo/types";
  export class Vdom {
      elements: spargoElement[];
      patch: (oldVnode: Element | VNode | DocumentFragment, vnode: VNode) => VNode;
      constructor(elements: spargoElement[], patch: (oldVnode: Element | VNode | DocumentFragment, vnode: VNode) => VNode);
      /**
       * @description Generate snabbdom VNode's from an Element's children
       * @param children
       * @param object
       * @returns (string | VNode)[]
       * @throws If an input is not synced to a piece of state
       * @throws If a synced value does not exist
       * @throws If a mask does not exist
       */
      generateVNodes(children: NodeListOf<ChildNode>, object: spargoElementObject): (string | VNode)[];
      /**
       * @description Prepares the given element to pass through the generateVNodes method
       * @param element
       * @param object
       * @returns void
       * @throws If the provided piece of state to iterate over does not exist
       */
      iterateOverLoops(element: Element, object: spargoElementObject): void;
      /**
       * @description Update the JavaScript state from an update to state and patch the view accordingly via the element
       * @param spargoElementObject
       * @returns void
       * @throws If the associated element is not found in memory
       */
      updateByElement(spargoElementObject: spargoElementObject): void;
      private loopNodeCreations;
      private updateLoopElement;
      private handleLoopTextAttr;
      private handleLoopHrefAttr;
      private handleLoopIfAttr;
      private handleLoopClassAttr;
      private generateVNodeForElement;
      private attachListenersToButton;
      private generateInputProps;
      /**
       * @description Checks if the provided element should not be included in the dom
       * @param childElement
       * @param ifData
       * @param object
       * @returns boolean
       */
      private shouldNotIncludeCheck;
      /**
       * @description Generate a snabbdom vnode
       * @param child
       * @param childElement
       * @param object
       * @param nodeData
       * @returns VNode
       */
      private generateVNode;
      /**
       * @description Will generate a node with text content
       * @param childElement
       * @param nodeData
       * @returns VNode | undefined
       */
      private nodeWithTextContent;
      /**
       * @description Will generate a text node if applicable
       * @param childElement
       * @param object
       * @param nodeData
       * @returns VNode | undefined
       * @throws If the associated text value (if it is set) does not exist in the object
       */
      private textNode;
      /**
       * @description Update the JavaScript state from an event and patch the view accordingly
       * @param e
       * @returns void
       * @throws If the associated element is not found in memory
       */
      private updateState;
      /**
       * @description Hunt down the snabbdom .sel for the given element
       * @param element
       * @returns string
       */
      private findSpargoParentNodeLocalName;
      /**
       * @description Generate new snabbdom nodes with updated values and update any necessary JavaScript state
       * @param nodes
       * @param element
       * @param e
       * @returns void
       */
      private retrieveNodeChildren;
  }
  //# sourceMappingURL=vdom.d.ts.map
}
declare module 'spargo/vdom.d.ts' {
  {"version":3,"file":"vdom.d.ts","sourceRoot":"","sources":["../../../home/justin/Projects/spargo/src/vdom.ts"],"names":[],"mappings":"AAAA,OAAO,EAAI,KAAK,EAAY,MAAM,UAAU,CAAC;AAE7C,OAAO,EAAC,aAAa,EAAE,mBAAmB,EAAC,MAAM,SAAS,CAAC;AAG3D,qBAAa,IAAI;IACb,QAAQ,EAAE,aAAa,EAAE,CAAM;IAC/B,KAAK,EAAE,CAAC,QAAQ,EAAE,OAAO,GAAG,KAAK,GAAG,gBAAgB,EAAE,KAAK,EAAE,KAAK,KAAK,KAAK,CAAC;gBAGzE,QAAQ,EAAE,aAAa,EAAE,EACzB,KAAK,EAAE,CAAC,QAAQ,EAAE,OAAO,GAAG,KAAK,GAAG,gBAAgB,EAAE,KAAK,EAAE,KAAK,KAAK,KAAK;IAMhF;;;;;;;;OAQG;IACI,cAAc,CAAC,QAAQ,EAAE,UAAU,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,mBAAmB,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,EAAE;IA2BvG;;;;;;OAMG;IACI,gBAAgB,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,mBAAmB,GAAG,IAAI;IAwB5E;;;;;OAKG;IACI,eAAe,CAAC,mBAAmB,EAAE,mBAAmB,GAAG,IAAI;IAyCtE,OAAO,CAAC,iBAAiB;IAgBzB,OAAO,CAAC,iBAAiB;IAmBzB,OAAO,CAAC,kBAAkB;IAmB1B,OAAO,CAAC,kBAAkB;IAgB1B,OAAO,CAAC,gBAAgB;IAaxB,OAAO,CAAC,mBAAmB;IA4C3B,OAAO,CAAC,uBAAuB;IA6D/B,OAAO,CAAC,uBAAuB;IA4C/B,OAAO,CAAC,kBAAkB;IA8B1B;;;;;;OAMG;IACH,OAAO,CAAC,qBAAqB;IA+C7B;;;;;;;OAOG;IACH,OAAO,CAAC,aAAa;IAyBrB;;;;;OAKG;IACH,OAAO,CAAC,mBAAmB;IAQ3B;;;;;;;OAOG;IACH,OAAO,CAAC,QAAQ;IAchB;;;;;OAKG;IACH,OAAO,CAAC,WAAW;IAmBnB;;;;OAIG;IAEH,OAAO,CAAC,6BAA6B;IAUrC;;;;;;OAMG;IACH,OAAO,CAAC,oBAAoB;CA4B/B"}
}
declare module 'spargo' {
  import main = require('spargo/src/index');
  export = main;
}